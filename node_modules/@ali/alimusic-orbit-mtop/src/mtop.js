(function(win, orbit){

var Promise = win.Promise;

if (!Promise) {
    var error = '当前浏览器不支持Promise，' +
        '请参考文档（http://gitlab.alibaba-inc.com/mtb/lib-es6polyfill/tree/master）中的解决方案';
    orbit.mtop = {
        ERROR: error
    }
    console.error(error);
    return;
}

var ready = Promise.resolve();

//检查缓存
var localStorage = win.localStorage;
if (!!localStorage) {
    try {
        localStorage.setItem('@private','false');
    } catch(e) {
        localStorage = false;
    }
}

// utitlites
function defer() {
    var deferred = {};
    var promise = new Promise(function(resolve, reject) {
        deferred.resolve = resolve;
        deferred.reject = reject;
    });
    deferred.promise = promise;
    return deferred;
}

function defaults(params, defaultParams) {
    for (var key in defaultParams) {
        if (params[key] === undefined) {
            params[key] = defaultParams[key];
        }
    }
    return params;
}

function mixin(defaultParams, params) {
    for (var key in params) {
        defaultParams[key] = params[key];
    }
    return defaultParams;
}

function appendScript(script) {
    var el = document.getElementsByTagName('head')[0] ||
                document.getElementsByTagName('body')[0] ||
                document.firstElementChild || document;
    el.appendChild(script);
}

function stringifyQS(qs) {
    var str = [];
    for (var key in qs) {
        if (!!qs[key]) {
            str.push(key + '=' + encodeURIComponent(qs[key]));
        }
    }

    return str.join('&');
}

function md5(string) {
    function rotateLeft(lValue, iShiftBits) {
        return (lValue << iShiftBits) | (lValue >>> (32 - iShiftBits));
    }
    function addUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = (lX & 0x80000000);
        lY8 = (lY & 0x80000000);
        lX4 = (lX & 0x40000000);
        lY4 = (lY & 0x40000000);
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (lX4 & lY4) {
            return (lResult ^ 0x80000000 ^ lX8 ^ lY8);
        }
        if (lX4 | lY4) {
            if (lResult & 0x40000000) {
                return (lResult ^ 0xC0000000 ^ lX8 ^ lY8);
            } else {
                return (lResult ^ 0x40000000 ^ lX8 ^ lY8);
            }
        } else {
            return (lResult ^ lX8 ^ lY8);
        }
    }

    function f(x, y, z) {
        return (x & y) | ((~x) & z);
    }

    function g(x, y, z) {
        return (x & z) | (y & (~z));
    }

    function h(x, y, z) {
        return (x ^ y ^ z);
    }

    function i(x, y, z) {
        return (y ^ (x | (~z)));
    }

    function FF(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(f(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    }

    function GG(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(g(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    }

    function HH(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(h(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    }

    function II(a, b, c, d, x, s, ac) {
        a = addUnsigned(a, addUnsigned(addUnsigned(i(b, c, d), x), ac));
        return addUnsigned(rotateLeft(a, s), b);
    }

    function convertToWordArray(string) {
        var lWordCount;
        var lMessageLength = string.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - (lNumberOfWords_temp1 % 64)) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = new Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - (lByteCount % 4)) / 4;
            lBytePosition = (lByteCount % 4) * 8;
            lWordArray[lWordCount] = (lWordArray[lWordCount] | (string.charCodeAt(lByteCount) << lBytePosition));
            lByteCount++;
        }
        lWordCount = (lByteCount - (lByteCount % 4)) / 4;
        lBytePosition = (lByteCount % 4) * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | (0x80 << lBytePosition);
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
    }

    function wordToHex(lValue) {
        var WordToHexValue = "", WordToHexValue_temp = "", lByte, lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = (lValue >>> (lCount * 8)) & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
    }

    function utf8Encode(string) {
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }

        }

        return utftext;
    }

    var x = [],
     k, AA, BB, CC, DD, a, b, c, d,
     S11 = 7, S12 = 12, S13 = 17, S14 = 22,
     S21 = 5, S22 = 9 , S23 = 14, S24 = 20,
     S31 = 4, S32 = 11, S33 = 16, S34 = 23,
     S41 = 6, S42 = 10, S43 = 15, S44 = 21;

    string = utf8Encode(string);

    x = convertToWordArray(string);

    a = 0x67452301;
    b = 0xEFCDAB89;
    c = 0x98BADCFE;
    d = 0x10325476;

    for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = addUnsigned(a, AA);
        b = addUnsigned(b, BB);
        c = addUnsigned(c, CC);
        d = addUnsigned(d, DD);
    }

    var temp = wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d);

    return temp.toLowerCase();
}

function readCookie(name) {
    var matched = new RegExp('(?:^|;\\s*)' + name + '\\=([^;]+)(?:;\\s*|$)').exec(document.cookie);
    if (matched) {
        return matched[1];
    }
}

function delCookie(name, mainDomain, subDomain) {
    var now = new Date();
    now.setTime(now.getTime() - 86400 * 1000);
    var path = '/';
    doc.cookie = name + '=;path=' + path + ';domain=.' + mainDomain + ';expires=' + now.toGMTString();
    doc.cookie = name + '=;path=' + path + ';domain=.' + subDomain + '.' + mainDomain + ';expires=' + now.toGMTString();
}

/**
 * @namespace orbit
 */
/**
 * @namespace mtop
 * @memberOf orbit
 */

/**
 * @member config
 * @memberof orbit.mtop
 * @property {String} prefix mtop请求地址前缀
 * @property {String} mainDomain mtop请求地址主域，例如：taobao.com/tmall.com
 * @property {String} subDomain mtop请求地址主域，例如：m/wapa/waptest
 */
var globalConfig = {
    useAlipayJSBridge: false   // 默认不使用支付宝的JSBridge获得token
};
var middlewares = [];
/**
 * @enum {Object}
 * @readonly
 * @memberof orbit.mtop
 */
var RESPONSE_TYPE = {
    /**
     * @description 请求出错
     * @type {Number}
     */
    'ERROR': -1,
    /**
     * @description 请求成功
     * @type {Number}
     */
    'SUCCESS': 0,
    /**
     * @description 请求token过期
     * @type {Number}
     */
    'TOKEN_EXPIRED': 1,
    /**
     * @description 请求session过期
     * @type {Number}
     */
    'SESSION_EXPIRED': 2
};

function parseDomainEnv() {
    var hostname = win.location.hostname;
    var hosts = [
        'taobao.net',
        'taobao.com',
        'tmall.com',
        'tmall.hk',
        'etao.com',
        /* HACK START */
        'dongting.com'
        /* HACK END */
    ];

    var regexp = new RegExp('([^.]*?)\\.?((?:' + hosts.join(')|(?:').replace(/\./g, '\\.') + '))', 'i');
    var matched = hostname.match(regexp) || [];

    var mainDomain = matched[2] || 'taobao.com';
    var subDomain = matched[1] || 'm';
    if (mainDomain === 'taobao.net' && (subDomain === 'x' || subDomain === 'waptest' || subDomain === 'daily')) {
        subDomain = 'waptest';
    } else if (mainDomain === 'taobao.net' && subDomain === 'demo') {
        subDomain = 'demo';
    } else if (subDomain !== 'waptest' && subDomain !== 'wapa' && subDomain !== 'm') {
        subDomain = 'm';
    }
    var prefix = mainDomain === 'etao.com' ? 'apie' : 'api';
    globalConfig.mainDomain = mainDomain;
    globalConfig.subDomain = subDomain;
    globalConfig.prefix = prefix;
}
parseDomainEnv();

function parseNativeEnv() {
    var ua = win.navigator.userAgent;
    var WindVaneVersion = ua.match(/WindVane[\/\s]([\d\.\_]+)/);
    if (WindVaneVersion) {
        globalConfig.WindVaneVersion = WindVaneVersion[1];
    }
    var AliApp = ua.match(/AliApp\(([^\/]+)\/([\d\.\_]+)\)/i);
    if (AliApp) {
        globalConfig.AliAppName = AliApp[1];
        globalConfig.AliAppVersion = AliApp[2];
    }
}
parseNativeEnv();

/**
 * @typedef {Object} requestParams
 * @property {String} api - 请求api的名称
 * @property {Object} data - 请求api的数据
 * @property {String} v - 请求api的版本
 * @property {String} [appKey] - H5请求的应用串，一般无需提供，有默认值
 * @property {String} [type=GET] - 请求的类型，GET/POST
 * @property {String} [dataType=jsonp] - 请求的数据格式，jsonp/json
 * @property {String} [ua] - 人机交互加密串
 * @property {Number} ecode - 签名设置（0-普通签名，1-安全签名）
 * @property {String} [timeout=20000] - 请求的超时时间
 */

var mtopInc = 0;
/**
 * Mtop类
 * @class orbit.mtop~Mtop
 * @param {requestParams} params 请求参数
 */
function Mtop(params) {
    this.id = (++mtopInc);

    this.params = defaults(params || {}, {
        v: '*',
        data: {},
        type: 'get',
        dataType: 'jsonp'
    });

    this.params.type = this.params.type.toLowerCase();

    if (typeof this.params.data === 'object') {
        this.params.data = JSON.stringify(this.params.data);
    }
    this.middlewares = middlewares.slice(0);
}

Mtop.prototype.use = function(middleware) {
    if (!middleware) {
        throw new Error('middleware is undefined');
    }
    this.middlewares.push(middleware);
    return this;
};

Mtop.prototype.__processRequestMethod = function (next) {
    var params = this.params;
    var options = this.options;

    if (params.type === 'get' && params.dataType === 'jsonp') {
        options.getJSONP = true;
    } else if (params.type === 'get' && params.dataType === 'json') {
        options.getJSON = true;
    } else if (params.type === 'post') {
        options.postJSON = true;
    }

    next();
};

Mtop.prototype.__processRequestType = function (next) {
    var that = this;
    var options = this.options;

    if (globalConfig.H5Request === true) { // 全局设置优先
        options.H5Request = true;
    }

    if (globalConfig.WindVaneRequest === true) { // 全局设置优先
        options.WindVaneRequest = true;
    }

    // 判断H5请求还是Native请求的逻辑
    if (options.H5Request === false && options.WindVaneRequest === true) {
        // 强制发起Native请求
        if (!lib.windvane || parseFloat(options.WindVaneVersion) < 5.4) {
            throw new Error('WINDVANE_NOT_FOUND::缺少WindVane环境');
        }
    } else if (options.H5Request === true) {
        // 只要H5Rquest为true，则强制发起H5请求
        options.WindVaneRequest = false;
    } else if (typeof options.WindVaneRequest === 'undefined' &&
                typeof options.H5Request === 'undefined'){
        // 如果没有设置，则自动判断
        /* HACK START */
        // 判断是否在娱乐app内
        if (lib.windvane && parseFloat(options.WindVaneVersion) >= 5.4 && (/AliApp\(AENT|zyule/i).test(window.navigator.userAgent)) {
        /* HACK END */
            // 发起Native请求
            options.WindVaneRequest = true;
        } else {
            // 发起H5请求
            options.H5Request = true;
        }
    }

    next().then(function() {
        var ret = options.retJson.ret;

        if (ret instanceof Array) {
            ret = ret.join(',');
        }
        /* HACK START */
        /* DO NOT RETRY */
        // if (options.WindVaneRequest === true &&
        //             (!ret ||
        //             ret.indexOf('HY_FAILED') > -1 ||
        //             ret.indexOf('HY_NO_HANDLER') > -1 ||
        //             ret.indexOf('HY_CLOSED') > -1 ||
        //             ret.indexOf('HY_EXCEPTION') > -1 ||
        //             ret.indexOf('HY_NO_PERMISSION') > -1)) {
        //     globalConfig.H5Request = true;
        //     // TODO retry
        //     return that.__sequence([
        //         that.__processRequestType,
        //         that.__processToken,
        //         that.__processRequestUrl,
        //         that.__processUnitPrefix,
        //         that.middlewares,
        //         that.__processRequest
        //     ]);
        // }
        /* HACK END */
    });
};

var TOKEN_KEY = '_m_h5_tk';
var TOKEN_ENC_KEY = '_m_h5_tk_enc';
Mtop.prototype.__getTokenFromAlipay = function () {
    var deferred = defer();
    var options = this.options;
    var ua = win.navigator.userAgent;
    var isOnline = !!location.protocol.match(/^https?\:$/);
    var isAlipay = options.AliAppName === 'AP' && parseFloat(options.AliAppVersion) >= 8.2;

    if (options.useAlipayJSBridge === true && !isOnline && isAlipay && win.AlipayJSBridge && win.AlipayJSBridge.call) {
        // 支付宝客户端（8.2以上），需要调用客户端提供的js来获得.taobao.com域下的cookie
        win.AlipayJSBridge.call('getMtopToken', function(json) {
            if (json && json.token) {
                options.token = json.token;
            }
            deferred.resolve();
        }, function() {
            deferred.resolve();
        });
    } else {
        deferred.resolve();
    }

    return deferred.promise;
};

Mtop.prototype.__getTokenFromCookie = function () {
    var options = this.options;
    options.token = options.token || readCookie(TOKEN_KEY);
    if (options.token) {
        options.token = options.token.split('_')[0];
    }
    return Promise.resolve();
};

Mtop.prototype.__processToken = function (next) {
    var that = this;
    var options = this.options;
    var params = this.params;

    if (options.token) {
        delete options.token;
    }

    if (options.WindVaneRequest === true) {
        next();
    } else {
        return ready.then(function() {
                return that.__getTokenFromAlipay();
            })
            .then(function() {
                return that.__getTokenFromCookie();
            })
            .then(next)
            .then(function() {
                var retJson = options.retJson;
                var ret = retJson.ret;

                if (ret instanceof Array) {
                    ret = ret.join(',');
                }

                if (ret.indexOf('TOKEN_EMPTY') > -1 ||
                        ret.indexOf('TOKEN_EXOIRED') > -1) {
                    options.maxRetryTimes = options.maxRetryTimes || 5;
                    options.failTimes = options.failTimes || 0;

                    if (options.H5Request && (++options.failTimes) < options.maxRetryTimes) {
                        // TODO retry
                        return that.__sequence([
                            that.__processToken,
                            that.__processRequestUrl,
                            that.__processUnitPrefix,
                            that.middlewares,
                            that.__processRequest
                        ]);
                    } else {
                        if (maxRetryTimes > 0) {
                            delCookie(TOKEN_KEY, options.mainDomain, options.subDomain);
                            delCookie(TOKEN_ENC_KEY, options.mainDomain, options.subDomain);
                        }
                        retJson.retType = RESPONSE_TYPE.TOKEN_EXPIRED;
                    }
                }
            });
    }
};

/*
 * 填充MTOP HEADER字段
 * @params {function} next
 * @return {void}
 */
Mtop.prototype.__fillMtopHeader = function(next){
    var params = this.params;
    var options = this.options;
    if (options.H5Request === true) {
        // Fill MTOP HEADER only if h5 request
        params = params ? params : {};
        var defaultData = {
            "requestStr": {
                //"model": "414525746239283739",
                "header": {
                    "platformId": "h5",
                    //"remoteIp": "30.17.4.139",
                    "callId": Date.now(),
                    //"osVersion": "9.2",
                    //"deviceId": "AipRQ56ziWQzUBkl4RwJN_3sbs-yoXj5sFhlpRmxtRfo",
                    //"proxy": 0,
                    //"ch": "201200",
                    //"openId":0,
                    //"network":1,
                    "appVersion":1000000,
                    "resolution": window.innerWidth +  '*' + window.innerHeight,
                    //"utdid": "VpZPKSncP6EDAKmVd6fhdo0J"
                }
            }
        }
        var mixinData = {};
        if(typeof params.data === "string"){
            mixinData = JSON.parse(params.data);
        }else if(typeof params.data === "object"){
            //简单检查，无法保证是否真的为key-value
            mixinData = params.data;
        }
        defaults(defaultData.requestStr, mixinData);
        mixin(defaultData.requestStr.header, mixinData.header ? mixinData.header : {});
        defaultData.requestStr = JSON.stringify(defaultData.requestStr);
        params.data = JSON.stringify(defaultData);
    }
    next();
};


Mtop.prototype.__processRequestUrl = function (next) {
    var params = this.params;
    var options = this.options;

    if (options.H5Request === true) {
        var path = '//' +
                (options.prefix ? options.prefix + '.' : '') +
                (options.subDomain ? options.subDomain + '.' : '') +
                options.mainDomain +
                '/h5/' + params.api.toLowerCase() + '/' + params.v.toLowerCase() + '/';

        var appKey = params.appKey || (options.subDomain === 'waptest' ? '4272' : '12574478');
        var timestamp = new Date().getTime();
        var sign = md5(options.token + '&' + timestamp + "&" + appKey + "&" + params.data);
        var querystring = {
            appKey: appKey,
            t: timestamp,
            sign: sign
        };
        var postdata = {
            data: params.data,
            ua: params.ua
        };

        Object.keys(params).forEach(function(n) {
            if (typeof querystring[n] === 'undefined' &&
                    typeof postdata[n] === 'undefined') {
                querystring[n] = params[n];
            }
        });

        if (options.getJSONP) {
            querystring.type = 'jsonp';
        } else if (options.getJSON || options.postJSON){
            querystring.type = 'originaljson';
        }
        options.querystring = querystring;
        options.postdata = postdata;
        options.path = path;
    }

    next();
};

Mtop.prototype.__processUnitPrefix = function(next) {
    var params = this.params;
    var options = this.options;

    if (localStorage && options.H5Request === true) {
        var api = params.api;
        var unitPrefix = false;
        var unitCookie = readCookie('_m_user_unitinfo_');
        var unitStorage = localStorage.getItem('unitinfo');
        //支持缓存 && 存在cookie && cookie字段是单元化 && 存在缓存数组 && 数组有此api
        if (unitCookie &&
            unitCookie.split('|')[0].indexOf('center') < 0 &&
            unitStorage &&
            unitStorage.indexOf(api.toLowerCase()) >= 0) {
            unitPrefix = unitCookie.split('|')[1];
        }

        if (unitPrefix && options.path) {
            options.path = options.path.replace(/^\/\//, '//' + unitPrefix + '.');
        }

        next().then(function() {
            if (localStorage) {
                var unitCookie = readCookie('_m_unitapi_v_');
                var unitStorage = localStorage.getItem('unitinfo');
                if (unitCookie) {
                    var unitinfo = unitStorage ? JSON.parse(unitStorage) : {};
                    //没有缓存数据 或者 版本不一致 拉取数据 jsonp
                    if (!unitStorage || unitCookie !== unitinfo.version) {
                        var isFinish = false;
                        var url = '//h5.' + options.subDomain +
                            '.taobao.com/js/mtop/unit/' + unitCookie + '/unitApi.js';
                        var script = document.createElement('script');
                        script.src = url;

                        var finish = function () {
                            if (isFinish) return;
                            isFinish = true;
                            script.onload = script.onerror = null;
                            if (script.parentNode) {
                                script.parentNode.removeChild(script);
                            }
                        };

                        script.onerror = function() {
                            finish();
                        };

                        //jsonp 方法
                        if (!win.jsonp_unitapi) {
                            win.jsonp_unitapi = function(json) {
                                finish();
                                localStorage.setItem('unitinfo', JSON.stringify(json));
                            };
                        }
                        appendScript(script);
                    }
                }
            }
        });
    } else {
        next();
    }
};

var jsonpInc = 0;
Mtop.prototype.__requestJSONP = function (throwError) {
    var deferred = defer();
    var params = this.params;
    var options = this.options;

    function cleanup(type) {
        if (timeoutid) {
            clearTimeout(timeoutid);
        }
        if (script.parentNode) {
            script.parentNode.removeChild(script);
        }
        if (type === 'TIMEOUT') {
            window[callbackName] = function() {
                window[callbackName] = undefined;
                try {
                    delete window[callbackName];
                } catch(e) {}
            };
        } else {
            window[callbackName] = undefined;
            try {
                delete window[callbackName];
            } catch(e) {}
        }
    }

    var timeout = params.timeout || 20000;
    var callbackName = 'mtopjsonp' + (++jsonpInc);
    var timeoutid = setTimeout(function() {
        cleanup('TIMEOUT');
        throwError('TIMEOUT::接口超时');
    }, timeout);

    options.querystring.callback = callbackName;

    var script = document.createElement('script');
    script.src = options.path + '?' +
        stringifyQS(options.querystring) + '&' +
        stringifyQS(options.postdata);
    script.sync = true;
    script.onerror = function() {
        cleanup('ABORT');
        throwError('ABORT::接口异常退出');
    };
    window[callbackName] = function() {
        options.results = Array.prototype.slice.call(arguments);
        cleanup();
        deferred.resolve();
    };
    appendScript(script);

    return deferred.promise;
};

Mtop.prototype.__requestJSON = function (throwError) {
    var deferred = defer();
    var params = this.params;
    var options = this.options;

    var xhr = new win.XMLHttpRequest();

    function cleanup(type) {
        if (timeoutid) {
            clearTimeout(timeoutid);
        }
        if (type === 'TIMEOUT') {
            xhr.abort();
        }
    }

    var timeout = params.timeout || 20000;
    var timeoutid = setTimeout(function() {
        cleanup('TIMEOUT');
        throwError('TIMEOUT::接口超时');
    }, timeout);

    xhr.onreadystatechange = function() {
        if (xhr.readyState == 4) {
            var status = xhr.status;
            var result;
            var headers;
            if ((status >= 200 && status < 300) || status == 304) {
                cleanup();
                result = xhr.responseText;
                headers = xhr.getAllResponseHeaders() || '';
                try {
                    result = (/^\s*$/).test(result) ? {} : JSON.parse(result);
                    result.responseHeaders = headers;
                    options.results = [result];
                    deferred.resolve();
                } catch(e) {
                    throwError('PARSE_JSON_ERROR::解析JSON失败');
                }
            } else {
                cleanup('ABORT');
                throwError('ABORT::接口异常退出');
            }
        }
    };

    var curl = options.path + '?' + stringifyQS(options.querystring);
    var type;
    var senddata;

    if (options.getJSON) {
        type = 'GET';
        curl += '&' + stringifyQS(options.postdata);
    } else if (options.postJSON) {
        type = 'POST';
        senddata = stringifyQS(options.postdata);
    }

    xhr.open(type, curl, true);
    xhr.withCredentials = true;
    xhr.setRequestHeader('Accept', 'application/json');
    xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
    if (params.headers) {
        for (var key in params.headers) {
            xhr.setRequestHeader(key, params.headers[key]);
        }
    }

    xhr.send(senddata);

    return deferred.promise;
};

Mtop.prototype.__requestWindVane = function (throwError) {
    var deferred = defer();
    var params = this.params;
    var options = this.options;

    var data = params.data;
    var api = params.api;
    var v = params.v;
    var post = !!options.postJSON ? 1 : 0;
    //var type = (!!options.getJSON || !!options.postJSON) ? 'orginaljson' : '';
    /* HACK START */
    var type = 'json';
    /* HACK END */
    var isHttps = location.protocol === 'https' ? 1 : 0;
    var isSec = params.isSec || 0;
    var sessionOption = params.sessionOption || 'AutoLoginOnly';
    var ecode;
    var timeout;
    var timer;

    if (typeof params.ecode === 'undefined') {
        throw new Error('UNEXCEPT_PARAM_ECODE::缺少ecode参数');
    } else {
        ecode = parseInt(params.ecode);
    }

    if (typeof params.timer !== 'undefined') {
        timer = parseInt(params.timer);
    } else if (typeof params.timeout !== 'undefined') {
        timer = parseInt(params.timeout);
    } else {
        timer = 20000;
    }
    timeout = timer * 2;

    function handler(result) {
        /* HACK START */
        // Mix the mtop data from result.response into result, put
        // result.response.ret and result.response.retType into
        // result.mtopRet
        // {
        //     "response": {
        //         "api": "alimusic.uic.MemberService.getMemberInfo",
        //         "v": "1.0",
        //         "ret": ["NEED_LOGIN::请登录"],
        //         "data": {},
        //         "retType": -1
        //     }
        // }
        //
        var mtopResponse = result.response ? result.response : {};
        var mtopRet = {};
        for(var key in mtopResponse){
            if("ret" === key || "retType" === key){
                mtopRet[key] = mtopResponse[key];
            }else{
                result[key] = mtopResponse[key];
            }
        }
        delete result.response;
        result.mtopRet = mtopRet;
        if(mtopRet.ret instanceof Array){
            // Use mtop return code if the there is any mtop response
            // Do not check the windvane call return code as there may
            // be mtop response even the windvane return code is HY_FAILED
            result.ret = mtopRet.ret;
            result.retType = mtopRet.retType;
        }
        /* HACK END */
        options.results = [result];
        deferred.resolve();
    }

    /* HACK START */
    // Use alimusicTtePlugin instead of default MtopWVPlugin
    lib.windvane.call('alimusicTtePlugin', 'sendMtopRequest', {
        api: api,
        v: v,
        post: String(post),
        type: type,
        isHttps: String(isHttps),
        ecode: String(ecode),
        isSec: String(isSec),
        param: JSON.parse(data),
        timer: timer,
        sessionOption: sessionOption
    }, handler, handler, timeout);
    /* HACK END */

    return deferred.promise;
};

Mtop.prototype.__processRequest = function (next, throwError) {
    var that = this;

    return ready.then(function() {
            var options = that.options;

            if (!!options.H5Request && !!options.getJSONP) {
                return that.__requestJSONP(throwError);
            } else if (!!options.H5Request && (!!options.getJSON || !!options.postJSON)) {
                return that.__requestJSON(throwError);
            } else if (!!options.WindVaneRequest) {
                return that.__requestWindVane(throwError);
            } else {
                throw new Error('UNEXCEPT_REQUEST::错误的请求类型');
            }
        })
        .then(next)
        .then(function() {
            var options = that.options;
            var params = that.params;
            var retJson = options.results[0];

            var ret = (retJson && retJson.ret || []);
            retJson.ret = ret;

            if (ret instanceof Array) {
                ret = ret.join(',');
            }

            if (ret.indexOf('SUCCESS') > -1) {
                retJson.retType = RESPONSE_TYPE.SUCCESS;
            } else {
                retJson.retType = RESPONSE_TYPE.ERROR;
            }
            options.retJson = retJson;
        })
};

Mtop.prototype.__sequence = function (fnArray) {
    var that = this;
    var preProcessor = [];
    var postProcessor = [];

    function add(fn) {
        if (fn instanceof Array) {
            fn.forEach(add);
        } else {
            var pre = defer();
            var post = defer();
            var next;

            preProcessor.push(function () {
                pre = defer();

                next = fn.call(that, function (result) {
                    pre.resolve(result);
                    return post.promise;
                }, function(errMsg) {
                    pre.reject(errMsg);
                    return post.promise;
                });

                if (next) {
                    next = next['catch'](function(e) {
                        pre.reject(e);
                    });
                }

                return pre.promise;
            });

            postProcessor.push(function (result) {
                post.resolve(result);
                return next;
            });
        }
    }

    fnArray.forEach(add);

    var promise = ready;
    var processor;

    while (!!(processor = preProcessor.shift())) {
        promise = promise.then(processor);
    }

    while (!!(processor = postProcessor.pop())) {
        promise = promise.then(processor);
    }

    return promise;
};

var startPoint = function(next) {
    next();
};

var endPoint = function(next) {
    next();
};

/**
 * 在浏览器中，会通过Ajax方式发起请求（H5）。在手淘和天猫客户端中，会通过客户端原生接口发起请求（MtopPlugin）。
 * @method request
 * @return {Promise}  Promise实例
 * @memberOf Mtop
 * @instance
 */
Mtop.prototype.request = function(options) {
    var that = this;
    this.options = defaults(options || {}, globalConfig);


    var promise = Promise.resolve([startPoint, endPoint])
        .then(function(ret) {
            var __processStart = ret[0];
            var __processEnd = ret[1];

            return that.__sequence([
                __processStart,
                that.__processRequestMethod,
                that.__processRequestType,
                /* HACK START */
                // Fill mtop header if only h5 request
                that.__fillMtopHeader,
                /* HACK END */
                that.__processToken,
                that.__processRequestUrl,
                that.__processUnitPrefix,
                that.middlewares,
                that.__processRequest,
                __processEnd
            ]);
        }).then(function(){
            var retJson = that.options.retJson;
            if (retJson.retType !== RESPONSE_TYPE.SUCCESS) {
                return Promise.reject(retJson);
            } else {
                if (that.options.successCallback) {
                    that.options.successCallback(retJson);
                }
                return Promise.resolve(retJson);
            }
        })['catch'](function(reason) {
            var retJson;
            if (reason instanceof Error) {
                console.error(reason.stack);
                retJson = {
                    ret: [reason.message],
                    stack: [reason.stack],
                    retJson: RESPONSE_TYPE.ERROR
                };
            } else if (typeof reason === 'string') {
                retJson = {
                    ret: [reason],
                    retJson: RESPONSE_TYPE.ERROR
                };
            } else if (reason !== undefined) {
                retJson = reason;
            } else {
                retJson = that.options.retJson;
            }
            if (that.options.failureCallback) {
                that.options.failureCallback(retJson);
            }
            return Promise.reject(retJson);
        });

    startPoint = function(next) {
        promise.then(next)['catch'](next);
    };

    return promise;
};

orbit.mtop = function(params) {
    return new Mtop(params);
};

/**
 * 在浏览器中，会通过Ajax方式发起请求（H5）。在手淘和天猫客户端中，会通过客户端原生接口发起请求（MtopPlugin）。
 * @deprecated 请使用new Mtop(params).request();
 * @method request
 * @param {requestParams} params - 请求参数
 * @param {Function} [successCallback] 成功回调
 * @param {Function} [failureCallback] 失败回调
 * @return {Promise} Promise对象实例
 * @memberof orbit.mtop
 */
orbit.mtop.request = function(params, successCallback, failureCallback) {
    var options = {
        H5Request: params.H5Request,
        WindVaneRequest: params.WindVaneRequest,
        LoginRequest: params.LoginRequest,
        AntiCreep: params.AntiCreep,
        AntiFlood: params.AntiFlood,
        successCallback: successCallback,
        failureCallback: failureCallback || successCallback
    };

    return new Mtop(params).request(options);
};

/**
 * 强制发起H5请求
 * @deprecated 请使用new Mtop(params).H5Request();
 * @method H5Request
 * @param  {requestParams} params - 请求参数
 * @param {Function} [successCallback] 成功回调
 * @param {Function} [failureCallback] 失败回调
 * @return {Promise}  Promise实例
 * @memberof orbit.mtop
 */
orbit.mtop.H5Request = function(params, successCallback, failureCallback) {
    var options = {
        H5Request: true,
        successCallback: successCallback,
        failureCallback: failureCallback || successCallback
    };

    return new Mtop(params).request(options);
};

orbit.mtop.middlewares = middlewares;
orbit.mtop.config = globalConfig;
orbit.mtop.RESPONSE_TYPE = RESPONSE_TYPE;
orbit.mtop.CLASS = Mtop;
})(window, window.orbit || (window.orbit = {}));