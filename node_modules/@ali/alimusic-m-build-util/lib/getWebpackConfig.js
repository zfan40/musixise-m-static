var path = require('path');
var fs = require('fs');
var webpack = require('webpack');
var _ = require("lodash");

var OUTPUT_PATH = 'build',
PUBLIC_PATH = "/";

var ExtractTextPlugin = require('extract-text-webpack-plugin'),
  HtmlWebpackPlugin = require('html-webpack-plugin'),
  CopyWebpackPlugin = require('copy-webpack-plugin');

var getVersion = require('./getVersion');

function generateWebpackConfig(options){
  var version = getVersion();
  var cdn = '';
  /* 判断环境 */
  if(!options.env || options.env == 'l' || options.env == 'local'){
    // 本地环境
  }else if(options.env == 'd' || options.env == 'daily'){
    cdn = 'g-assets.daily.taobao.net';
  }else if(options.env == 'p' || options.env == 'product'){
    cdn = 'g.alicdn.com';
  }

  var config = _getBaseConfig();

  /**
   * options.target可以是'page1'或者'page1,page2,page3'。如果为空，则加入所有页面
   */
  options.target = options.target ? options.target : "";
  var target = typeof options.target == "string" ? options.target.split(',') : options.target;
  if(!options.target){
    target = [];
    var dirName = path.resolve('./src');
    var files = fs.readdirSync(dirName);

    for(var i = 0, len = files.length; i < len; i++){
      var pageName = files[i];
      if(['_common', 'common', 'README', 'assets'].indexOf(pageName) < 0 && pageName.indexOf('.') != 0){
        target.push(pageName);
      }
    }
  }

  /**
   * 独立CSS文件
   */
  config.plugins.push(
    new ExtractTextPlugin('[name].css', {
      disable: false,
      allChunks: true
    })
  );

  /**
   * 根据target配置页面entry以及plugin
   */
  target =  target && target.length ? target : [];
  for(var i = 0; i < target.length ; i++){
    var resourceBase = '';
    if(!options.env || options.env == 'l' || options.env == 'local'){
      resourceBase = '.'
    }else{
      resourceBase = '//' + [cdn, 'music', options.project, version, target[i]].join('/')
    }
    var buildOptions = _.extend({
      'resourceBase': resourceBase
    }, options);
    /**
     * 生成index.html文件
     */
    config.plugins.push(new HtmlWebpackPlugin(
      {
        buildOptions: buildOptions,
        filename: '../build/' + target[i] + '/index.html',
        template: './src/' + target[i] + '/index.html',
        inject: false
      }
    ));
    /**
     * 复制每个页面下的assets文件夹
     */
    config.plugins.push(new CopyWebpackPlugin([
      {
        from: './src/' + target[i] + '/assets',
        to: '../build/' + target[i] + '/assets'
      }
    ]));
    /**
     * 配置入口js
     */
    config.entry['/' + target[i] + '/index'] = './src/' + target[i] + '/index.js'
  }

  if(options.debug){
    config.devtool = 'source-map';
  }else{
    config.plugins.push(new webpack.optimize.UglifyJsPlugin({
      output: { comments: false },
      compress: { drop_console: true }
    }));
  }

  return config;
};

function _getBaseConfig(){
  return {
    entry: {},
    output: {
      path: OUTPUT_PATH,
      filename: '[name].js',
      publicPath: PUBLIC_PATH,
      sourceMapFilename: '[file].map'
    },
    //devtool: 'source-map',
    module: {
      loaders: [
        {test: /\.(jpg|png|gif)$/, loader: "url?limit=10240&name=[name]-[hash].[ext]"},
        //{test: /\.(jpg|png|gif)$/, loader: "file-loader?name=assets/[name].[ext]"},
        {test: /\.css$/, loader: ExtractTextPlugin.extract("style-loader", "css-loader?sourceMap")},
        {test: /\.scss$/, loader: ExtractTextPlugin.extract("style-loader", "css-loader?sourceMap!sass")},
        {test: /\.ejs$/, loader: "@ali/alimusic-orbit-ejs-loader?variable=data"}
      ]
    },
    "orbitEjsTemplateLoader": {
      minify: true,
      engineFull: 'var _ = { escape: require(\'lodash.escape\') };',
      minifierOptions: {
        collapseInlineTagWhitespace: true,
        conservativeCollapse: false,
        ignoreCustomFragments: [/<%[\s\S]*?%>/]
      }
    },
    plugins: []
  };
}

module.exports = generateWebpackConfig;