var extend = require('../object/extend/deep');
var isLeapYear = require('./isLeapYear');
var data = require('./data');

//mustache template
/*
 <table>
 <tbody>
 <tr>
 <th colspan="7">{{name}} {{year}}</th>
 </tr>
 <tr>
 {{#dayNames}}
 <th>{{.}}</th>
 {{/dayNames}}
 </tr>
 {{#weeks}}
 <tr>
 {{#.}}
 {{#main}}
 <td>{{dayFormat}}.{{monthFormat}}.{{year}}</td>
 {{/main}}
 {{^main}}
 <td>&nbsp;</td>
 {{/main}}
 {{/.}}
 </tr>
 {{/weeks}}
 </tbody>
 </table>
 */


//muastache template all
/*
 <table>
 <tbody>
 <tr>
 <th colspan="7">{{name}} {{year}}</th>
 </tr>
 <tr>
 {{#dayNames}}
 <th>{{.}}</th>
 {{/dayNames}}
 </tr>
 {{#weeks}}
 <tr>
 {{#.}}
 {{#main}}
 <td>{{dayFormat}}.{{monthFormat}}.{{year}}</td>
 {{/main}}
 {{#pre}}
 <td><small>{{dayFormat}}.{{monthFormatPre}}.{{yearPre}}</small></td>
 {{/pre}}
 {{#next}}
 <td><small>{{dayFormat}}.{{monthFormatNext}}.{{yearNext}}</small></td>
 {{/next}}
 {{/.}}
 </tr>
 {{/weeks}}
 </tbody>
 </table>
 */

/*
 var data = cmnjs.date.generateMonth(7, 2015, {
 mondayFirst: 1,
 zeroes: 1,
 dateObject: 1
 });
 var rendered = cmnjs.mustache.render(template, data);
 document.body.innerHTML = rendered;
 */

// month 1-indexed, January is 1, etc.

function generateDay(name, day, month, year, zeroes, dateObject) {

  var returnObject = {};

  returnObject.day = day;
  returnObject[name] = name;

  if (zeroes) {
    returnObject.dayFormat = ('0' + day).slice(-2);
  }

  if (dateObject) {
    returnObject.date = new Date(year, month, day);
  }

  return returnObject;

}

function generateMonth(month, year, options) {

  var month0;
  var monthData = {};
  var dayData;
  var weekArr;
  var firstDay;
  var startingDay;
  var monthLength;
  var day;
  var dayPre;
  var dayNext;
  var monthLengthPre;

  options = options || {};

  //0-indexed
  month0 = month - 1;

  options.monthNames = extend([], data.monthNames, options.monthNames);

  options.dayNames = extend([], data.dayNames, options.dayNames);

  // get first day of month
  firstDay = new Date(year, month0, 1);
  startingDay = firstDay.getDay();

  if (options.mondayFirst) {
    startingDay -= 1;
    if (startingDay === -1) {
      startingDay = 6;
    }
    options.dayNames.push(options.dayNames.shift());
  }

  monthLength = data.daysInMonth[month0];

  if (month0 === 1 && isLeapYear(year)) {
    monthLength = 29;
  }

  monthData.name = options.monthNames[month0];
  monthData.year = year;
  monthData.month = month;
  monthData.monthFormat = ('0' + month).slice(-2);
  monthData.month0 = month0;
  monthData.monthNames = options.monthNames;
  monthData.dayNames = options.dayNames;
  monthData.weeks = [];

  day = 1;

  if (options.all) {

    monthData.monthPre0 = month0 - 1;
    monthData.monthNext0 = month0 + 1;
    monthData.yearPre = year;
    monthData.yearNext = year;
    if (monthData.monthPre0 === -1) {
      monthData.monthPre0 = 11;
      monthData.yearPre = year - 1;
    }
    if (monthData.monthNext0 === 12) {
      monthData.monthNext0 = 0;
      monthData.yearNext = year + 1;
    }

    monthData.monthPre = monthData.monthPre0 + 1;
    monthData.monthNext = monthData.monthNext0 + 1;

    monthData.monthFormatPre = ('0' + monthData.monthPre).slice(-2);
    monthData.monthFormatNext = ('0' + monthData.monthNext).slice(-2);

    monthLengthPre = data.daysInMonth[monthData.monthPre0];
    if (monthData.monthPre0 === 1 && isLeapYear(year)) {
      monthLengthPre = 29;
    }
    dayPre = monthLengthPre - startingDay + 1;
    dayNext = 1;

  }

  //weeks
  for (var i = 0; i < 6; i++) {

    weekArr = [];

    //weekdays
    for (var j = 0; j <= 6; j++) {

      if ((day <= monthLength && (i > 0 || j >= startingDay))) {

        dayData = generateDay('main', day, month0, year,
          options.zeroes, options.dateObject);

        day++;

      } else if (options.all) {

        if (day === 1) {

          dayData = generateDay('pre', dayPre, monthData.monthPre0,
            monthData.yearPre, options.zeroes, options.dateObject);

          dayPre++;


        } else {

          dayData = generateDay('next', dayNext, monthData.monthNext0,
            monthData.yearNext, options.zeroes, options.dateObject);

          dayNext++;

        }

      }

      weekArr.push(dayData);

    }

    monthData.weeks.push(weekArr);

    if (day > monthLength) {
      break;
    }

  }

  return monthData;

}

generateMonth.dateData = data;

module.exports = generateMonth;
