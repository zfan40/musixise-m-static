// from underscore.js // reformat and modified

// Returns a function, that, when invoked, will only be triggered at most once
// during a given window of time. Normally, the throttled function will run
// as much as it can, without ever going more than once per `wait` duration;
// but if you'd like to disable the execution on the leading edge, pass
// `{leading: false}`. To disable execution on the trailing edge, ditto.

var dateNow = require('../date/now');

module.exports = function throttlePre(fn, delay, options) {

  var timeout = null;
  var previous = 0;

  if (!options) {
    options = {};
  }

  return function throttle() {

    var now = dateNow();
    var remaining;

    if (!previous && options.leading === false) {
      previous = now;
    }

    remaining = delay - (now - previous);

    if (remaining <= 0 || remaining > delay) {

      if (timeout) {
        clearTimeout(timeout);
        timeout = null;
      }
      previous = now;
      fn.apply(this, arguments);

    } else if (!timeout && options.trailing !== false) {

      timeout = setTimeout(function throttleTimeOut(args) {
        previous = options.leading === false ? 0 : dateNow();
        timeout = null;
        fn.apply(this, args);
      }.bind(this, arguments), remaining);

    }

  };

};
